<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use App\Models\WordDocument;
use App\Services\WordDocumentSearchService;
use Illuminate\Support\Facades\Log;

class CleanWordDocumentsIndex extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'chatbot:clean-word-index 
                           {--dry-run : Solo mostrar qu√© se har√≠a sin ejecutar cambios}
                           {--orphaned : Solo limpiar documentos hu√©rfanos del √≠ndice}
                           {--invalid : Solo limpiar documentos con estado no procesado}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Limpiar y mantener el √≠ndice de documentos Word';

    private $wordSearchService;

    public function __construct()
    {
        parent::__construct();
        $this->wordSearchService = new WordDocumentSearchService();
    }

    /**
     * Execute the console command.
     */
    public function handle()
    {
        $startTime = microtime(true);
        $dryRun = $this->option('dry-run');
        $orphanedOnly = $this->option('orphaned');
        $invalidOnly = $this->option('invalid');

        $this->info('üßπ Iniciando limpieza del √≠ndice de documentos Word...');
        
        if ($dryRun) {
            $this->warn('üîç Modo DRY-RUN: Solo se mostrar√°n los cambios sin ejecutarlos');
        }

        $cleaned = 0;
        $errors = 0;

        // Limpiar documentos sin contenido
        if (!$orphanedOnly) {
            $invalidDocuments = WordDocument::where(function($query) {
                $query->whereNull('contenido_texto')
                      ->orWhere('contenido_texto', '');
            })->get();
            
            $this->info("üîç Encontrados {$invalidDocuments->count()} documentos sin contenido");
            
            foreach ($invalidDocuments as $document) {
                try {
                    if (!$dryRun) {
                        $document->unsearchable();
                        $cleaned++;
                    }
                    
                    $this->line("  ‚ùå Removido: Doc {$document->id} (Sin contenido)");
                    
                } catch (\Exception $e) {
                    $errors++;
                    $this->error("  ‚ö†Ô∏è  Error removiendo documento {$document->id}: " . $e->getMessage());
                }
            }
        }

        // Verificar documentos con contenido que deber√≠an estar indexados
        if (!$invalidOnly) {
            $processedDocuments = WordDocument::whereNotNull('contenido_texto')
                ->where('contenido_texto', '!=', '')
                ->get();
            
            $this->info("üîç Verificando {$processedDocuments->count()} documentos con contenido...");
            
            $notIndexed = 0;
            
            foreach ($processedDocuments as $document) {
                try {
                    // Verificar si est√° en el √≠ndice
                    $inIndex = $this->isDocumentInIndex($document);
                    
                    if (!$inIndex) {
                        $notIndexed++;
                        
                        if (!$dryRun) {
                            $document->searchable();
                            $cleaned++;
                        }
                        
                        $this->line("  ‚úÖ Re-indexado: Doc {$document->id} ({$document->title})");
                    }
                    
                } catch (\Exception $e) {
                    $errors++;
                    $this->error("  ‚ö†Ô∏è  Error verificando documento {$document->id}: " . $e->getMessage());
                }
            }
            
            if ($notIndexed > 0) {
                $this->warn("üìã Se encontraron {$notIndexed} documentos procesados no indexados");
            } else {
                $this->info("‚úÖ Todos los documentos procesados est√°n correctamente indexados");
            }
        }

        // Mostrar estad√≠sticas finales
        $this->showFinalStats($cleaned, $errors, $startTime, $dryRun);

        // Limpiar cach√© de b√∫squedas
        if (!$dryRun && $cleaned > 0) {
            $this->wordSearchService->clearSearchCache();
            $this->info('üóëÔ∏è  Cach√© de b√∫squedas limpiado');
        }

        return $errors > 0 ? 1 : 0;
    }

    /**
     * Verificar si un documento est√° en el √≠ndice
     */
    private function isDocumentInIndex(WordDocument $document): bool
    {
        try {
            // Intentar buscar el documento espec√≠fico
            $results = WordDocument::search($document->title ?? 'documento')
                ->where('id', $document->id)
                ->take(1)
                ->get();
                
            return $results->contains('id', $document->id);
            
        } catch (\Exception $e) {
            // Si hay error con Scout, asumir que no est√° indexado
            return false;
        }
    }

    /**
     * Mostrar estad√≠sticas finales
     */
    private function showFinalStats(int $cleaned, int $errors, float $startTime, bool $dryRun): void
    {
        $executionTime = round(microtime(true) - $startTime, 2);
        
        $this->newLine();
        
        if ($dryRun) {
            $this->info('üîç Resumen DRY-RUN:');
        } else {
            $this->info('üéâ Limpieza completada!');
        }
        
        $this->table(
            ['M√©trica', 'Valor'],
            [
                ['Documentos procesados', $cleaned],
                ['Errores encontrados', $errors],
                ['Tiempo de ejecuci√≥n', "{$executionTime} segundos"],
                ['Modo', $dryRun ? 'DRY-RUN' : 'EJECUCI√ìN']
            ]
        );

        // Mostrar estad√≠sticas del √≠ndice
        try {
            $stats = $this->wordSearchService->getSearchStats();
            
            $this->newLine();
            $this->info('üìä Estado actual del √≠ndice:');
            $this->line("   ‚Ä¢ Total documentos: {$stats['total_documents']}");
            $this->line("   ‚Ä¢ Documentos indexados: {$stats['total_indexed']}");
            $this->line("   ‚Ä¢ Porcentaje indexado: {$stats['indexing_percentage']}%");
            
            if ($stats['last_updated']) {
                $this->line("   ‚Ä¢ √öltima actualizaci√≥n: {$stats['last_updated']}");
            }
            
        } catch (\Exception $e) {
            $this->warn('‚ö†Ô∏è  No se pudieron obtener estad√≠sticas del √≠ndice: ' . $e->getMessage());
        }

        if ($errors > 0) {
            $this->newLine();
            $this->warn("‚ö†Ô∏è  Se encontraron {$errors} errores durante la limpieza.");
            $this->line('   Revisa los logs para m√°s detalles.');
        }
    }
}
